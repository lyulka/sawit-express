JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical
sugar over JavaScript's existing prototype-based inheritance. The class
syntax does not introduce a new object-oriented inheritance model to 
JavaScript.

Defining classes

Class declarations

Classes are in fact "special functions," and just as you can define function
expressions and function declarations, the class syntax has two components:
class expresssions and class declarations.

One way to define a class is using a class declaration. To declare a class,
you use the class keyword with the name of the class ("Rectangle" here).

An important difference between function declarations and class declarations is
that function declarations are hoisted and class declarations are not.

Hoisting

Hoisting is a term you will not find used in any normative specification prose
prior to ECMAScript 2015 Language Specification. Hoisting was thought up as 
a general way of thinking about how execution contexts (specifically the creation and
execution phases) work in JavaScript. However, the concept can be a little 
confusing at first.

Conceptually, for example, a strict definition of hoisting suggests that variable
and function declarations are physically moved to the top of your code, but this
is not in fact what happens. Instead, the variable and function declarations are 
put into memory during the compile phase, but stay exactly where you typed them
in your code.

JavaScript only hoists declarations, not initializations. If a variable is declared
and initialized after using it, the value will be undefined.

Class expressions

A class expression is another way to define a class. Class expressions can be named
or unnamed. The name given to a named class expression is local to the class's body.
(it can be retrieved through the class's (not an instance's) name property, though).

Class body and method definitions

The body of a class is the part that is in curly brackets {}. This is where you
define class members, such as methods or constructor.

The body of a class is executed in strict mode, i.e., code written here is subject
to stricter syntax for increased performance, some otherwise silent errors will be
thrown, and certain keywords reserved for future versions of ECMAScript.

Strict mode

JavaScript's strict mode, introduced in ECMAScript 5, is a way to opt in to a
restricted variant of JavaScript, thereby implicitly opting-out of "sloppy mode."
Strict mode isn't just a subset: it intentionally has different semantics from
normal code. Browsers not supproting strict mode will run strict mode code with
different behavior from browsers that do, so don't rely on strict mode without 
feature-testing for support for the relevant aspects of strict mode. Strict mode 
code and non-strict mode code can coexist, so scripts can opt into strict mode
incrementally.

Strict mode makes several changes to normal JavaScript semantics:
1. Eliminates some JavaScript silent errors by changing them to throw errors.
2. Fixes mistakes that make it difficult for JavaScript engines to perform 
optimizations: strict mode code can sometimes be made to run faster than identical
code that's not strict mode.
3. Prohibits some syntax likely to be defined in future versions of ECMAScript.

To invoke strict mode for an entire script, put the exact statement "use strict";
before any other statements.

Constructor

The constructor method is a special method for creating and initializing an object
created with a class. There can only be one special method with the name 
"constructor" in a class. A SyntaxError will be thrown if the class contains more
than one occurrence of a constructor method.

A constructor can use the super keywrod to call the constructor of the super class.

